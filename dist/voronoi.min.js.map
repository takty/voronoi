{
  "version": 3,
  "sources": ["../src/vertex.ts", "../src/plane.ts", "../src/edge.ts", "../src/face.ts", "../src/mesh.ts", "../src/voronoi.ts"],
  "sourcesContent": ["/**\n * Vertex\n *\n * @author Takuto Yanagida\n * @version 2024-11-19\n */\n\nexport type Vertex = [number, number, number];\n\nexport function add(a: Vertex, b: Vertex): Vertex {\n  return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n}\n\nexport function sub(a: Vertex, b: Vertex): Vertex {\n  return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n}\n\nexport function intDiv(a: Vertex, b: Vertex, m: number = 0.5): Vertex {\n\tconst n: number = 1 - m;\n\treturn [\n\t\ta[0] * n + b[0] * m,\n\t\ta[1] * n + b[1] * m,\n\t\ta[2] * n + b[2] * m,\n\t];\n}\n", "/**\n * Plane\n *\n * @author Takuto Yanagida\n * @version 2024-11-22\n */\n\nimport { Vertex } from './vertex';\nimport { Edge } from './edge';\n\n/**\n * Represents a plane in 3D space defined by the equation AX + BY + CZ + D = 0.\n * This class provides methods to calculate the side of a point relative to the plane,\n * and to find intersections of edges or vertices with the plane.\n */\nexport class Plane {\n\n\tstatic readonly E: number = 0.001;\n\n\t#A: number;\n\t#B: number;\n\t#C: number;\n\t#D: number;\n\n\t/**\n\t * Creates a plane from a specified center point and a direction vector.\n\t * The direction vector (from p0 to p1) defines the plane's orientation.\n\t *\n\t * @param p0 - The center point on the plane.\n\t * @param p1 - A point determining the direction vector of the plane.\n\t */\n\tconstructor(p0: Vertex, p1: Vertex) {\n\t\tconst len: number = Math.sqrt(p1[0] * p1[0] + p1[1] * p1[1] + p1[2] * p1[2]);\n\t\tthis.#A = p1[0] / len;\n\t\tthis.#B = p1[1] / len;\n\t\tthis.#C = p1[2] / len;\n\t\tthis.#D = - this.#A * p0[0] - this.#B * p0[1] - this.#C * p0[2];\n\t}\n\n\t/**\n\t * Determines the relative position of a given vertex to the plane.\n\t * Returns -1 if the point is below the plane, 1 if above, and 0 if on the plane.\n\t *\n\t * @param p - The vertex to evaluate.\n\t * @returns -1, 0, or 1 indicating the side of the plane the vertex is on.\n\t */\n\tside(p: Vertex): -1 | 0 | 1 {\n\t\tconst t: number = this.#A * p[0] + this.#B * p[1] + this.#C * p[2] + this.#D;\n\t\tif (t < -Plane.E) return -1;\n\t\tif (t > Plane.E) return 1;\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Calculates the side of each vertex in a list relative to the plane.\n\t *\n\t * @param vs - An array of vertices to evaluate.\n\t * @returns A map of each vertex to its side relative to the plane.\n\t */\n\tsides(vs: Vertex[]): Map<Vertex, number> {\n\t\tconst sides: Map<Vertex, number> = new Map();\n\n\t\tfor (const v of vs) {\n\t\t\tsides.set(v, this.side(v));\n\t\t}\n\t\treturn sides;\n\t}\n\n\t/**\n\t * Calculates the intersection point of a line segment with the plane, if any.\n\t * The line segment is defined by two vertices, and the intersection point\n\t * is returned if it lies within the segment bounds.\n\t *\n\t * @param v0 - The starting vertex of the line segment.\n\t * @param v1 - The ending vertex of the line segment.\n\t * @returns The intersection vertex if it exists within the segment, otherwise null.\n\t */\n\t#intersection(v0: Vertex, v1: Vertex): Vertex | null {\n\t\tconst d: number = this.#A * (v0[0] - v1[0]) + this.#B * (v0[1] - v1[1]) + this.#C * (v0[2] - v1[2]);\n\t\tif (Math.abs(d) < 0.001) {\n\t\t\treturn null;\n\t\t}\n\t\tconst u: number = (this.#A * v0[0] + this.#B * v0[1] + this.#C * v0[2] + this.#D) / d;\n\t\tif (u < 0 || 1 < u) {\n\t\t\treturn null;\n\t\t}\n\t\treturn [v0[0] + u * (v1[0] - v0[0]), v0[1] + u * (v1[1] - v0[1]), v0[2] + u * (v1[2] - v0[2])];\n\t}\n\n\t/**\n\t * Calculates intersection points of a list of edges with the plane.\n\t * Each intersection is stored for both the edge and its paired edge if applicable.\n\t *\n\t * @param es - An array of edges to check for intersections with the plane.\n\t * @returns A map of each edge to its intersection vertex, if any.\n\t */\n\tintersections(es: Edge[]): Map<Edge, Vertex> {\n\t\tconst ret: Map<Edge, Vertex> = new Map();\n\n\t\tfor (const e of es) {\n\t\t\tif (ret.has(e)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst v: Vertex | null = this.#intersection(e.getBegin(), e.getEnd() as Vertex);\n\t\t\tif (v) {\n\t\t\t\tret.set(e, v);\n\t\t\t\tif (e.pair) {\n\t\t\t\t\tret.set(e.pair, v);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n}\n", "/**\n * Edge\n *\n * @author Takuto Yanagida\n * @version 2024-11-19\n */\n\nimport { Vertex } from './vertex';\n\n/**\n * Represents an edge in a geometric structure, connecting two vertices.\n * Each edge may have a paired edge in the opposite direction and a next edge within the same face.\n */\nexport class Edge {\n\n\t#bgn: Vertex;\n\t#end!: Vertex;\n\n\t/**\n\t * The next edge in the same face\n\t */\n\tpublic next: Edge | null = null;\n\n\t/**\n\t * The paired edge in the opposite direction\n\t */\n\tpublic pair: Edge | null = null;\n\n\t/**\n\t * Creates an instance of Edge with the specified beginning vertex.\n\t *\n\t * @param v - The starting vertex of this edge.\n\t */\n\tconstructor(v: Vertex) {\n\t\tthis.#bgn = v;\n\t}\n\n\tsetNext(e: Edge): void {\n\t\tthis.next = e;\n\t\tthis.#end = e.#bgn;\n\t}\n\n\t/**\n\t * Returns the starting vertex of this edge.\n\t *\n\t * @returns The starting vertex of the edge.\n\t */\n\tgetBegin(): Vertex {\n\t\treturn this.#bgn;\n\t}\n\n\t/**\n\t * Returns the ending vertex of this edge.\n\t *\n\t * @returns The ending vertex of the edge, defined as the starting vertex of the next edge.\n\t */\n\tgetEnd(): Vertex {\n\t\treturn this.#end;\n\t}\n\n}\n", "/**\n * Face\n *\n * @author Takuto Yanagida\n * @version 2024-11-22\n */\n\nimport { Vertex } from './vertex';\nimport { Edge } from './edge';\n\n/**\n * Represents a face in a geometric structure, composed of edges that form a closed loop.\n * Each face has a reference to its first edge and provides methods to calculate points\n * within or along its edges in a plane.\n */\nexport class Face {\n\n\tstatic readonly E: number = 0.001;\n\n\t#firstEdge: Edge;\n\n\t/**\n\t * Creates an instance of Face, setting up the circular linkage of edges\n\t * to define a closed face.\n\t *\n\t * @param es - An array of edges that form the face.\n\t */\n\tconstructor(es: Edge[]) {\n\t\tconst n: number = es.length;\n\n\t\tfor (let i: number = 0; i < n - 1; ++i) {\n\t\t\tes[i].setNext(es[i + 1]);\n\t\t}\n\t\tes[n - 1].setNext(es[0]);\n\n\t\tthis.#firstEdge = es[0];\n\t}\n\n\t/**\n\t * Calculates the number of edges that compose this face.\n\t *\n\t * @returns The total number of edges in the face.\n\t */\n\tlength(): number {\n\t\tlet ret: number = 0;\n\t\tlet e: Edge = this.#firstEdge;\n\t\tdo {\n\t\t\tret += 1;\n\t\t\te = e.next as Edge;\n\t\t} while (e !== this.#firstEdge);\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Returns the vertices on the specified side of the face based on a provided side reference.\n\t *\n\t * @param refSide - The reference side of the face.\n\t * @param vertToSide - A map associating each vertex with a specific side.\n\t * @param edgeToInter - A map providing intersection points for edges that intersect a plane.\n\t * @returns An array of vertices on the specified side of the face.\n\t */\n\tverticesOf(refSide: number, vertToSide: Map<Vertex, number>, edgeToInter: Map<Edge, Vertex>): Vertex[] {\n\t\tconst ret: Vertex[] = [];  // Array to store vertices on the specified side.\n\n\t\tlet e: Edge = this.#firstEdge;\n\t\tdo {\n\t\t\tconst v: Vertex = e.getBegin();\n\t\t\tif (vertToSide.get(v) as number * refSide >= 0) {\n\t\t\t\tret.push(v);  // Adds vertex on the specified side.\n\t\t\t}\n\t\t\tif (edgeToInter.has(e)) {\n\t\t\t\tret.push(edgeToInter.get(e) as Vertex);  // Adds intersection point of edge with plane.\n\t\t\t}\n\t\t\te = e.next as Edge;\n\t\t} while (e !== this.#firstEdge);\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Counts grid points within the face restricted to a specific plane (common z-coordinate).\n\t *\n\t * @param cx - The center x-coordinate.\n\t * @param cy - The center y-coordinate.\n\t * @param resolution - The resolution of the grid.\n\t * @returns The count of grid points within the face.\n\t */\n\tcountGridPoints(cx: number, cy: number, resolution: number): number {\n\t\tlet ret: number = 0;\n\n\t\tconst pc: number = this.#countInternalPoints(cx, cy, resolution);\n\t\tret += pc;\n\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst pc: number = this.#countInternalPoints(cx, cy + inc * resolution, resolution);\n\t\t\tif (0 === pc) break;\n\t\t\tret += pc;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst pc: number = this.#countInternalPoints(cx, cy - inc * resolution, resolution);\n\t\t\tif (0 === pc) break;\n\t\t\tret += pc;\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Returns internal grid points along the x-axis within the boundaries of the face on a given plane.\n\t *\n\t * @param cx - The center x-coordinate.\n\t * @param cy - The y-coordinate.\n\t * @param resolution - The resolution of the grid.\n\t * @returns The number of internal grid points at the specified y-coordinate.\n\t */\n\t#countInternalPoints(cx: number, cy: number, resolution: number): number {\n\t\tconst ips: number[] = this.#getIntersectionPoints(cy);\n\n\t\tlet [x0, x1] = ips;\n\t\tif (x0 > x1) {\n\t\t\t[x0, x1] = [x1, x0];\n\t\t}\n\t\tlet pc: number = 0;\n\t\tif (x0 < cx && cx < x1) {\n\t\t\tpc += 1;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst s: number = pc;\n\t\t\tconst x: number = cx + inc * resolution;\n\t\t\tif (x0 < x && x < x1) {\n\t\t\t\tpc += 1;\n\t\t\t}\n\t\t\tif (pc === s) break;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst s: number = pc;\n\t\t\tconst x: number = cx - inc * resolution;\n\t\t\tif (x0 < x && x < x1) {\n\t\t\t\tpc += 1;\n\t\t\t}\n\t\t\tif (pc === s) break;\n\t\t}\n\t\treturn pc;\n\t}\n\n\t/**\n\t * Calculates grid points within the face restricted to a specific plane (common z-coordinate).\n\t *\n\t * @param cx - The center x-coordinate.\n\t * @param cy - The center y-coordinate.\n\t * @param resolution - The resolution of the grid.\n\t * @returns An array of 3D points within the face on the specified plane.\n\t */\n\tgetGridPoints(cx: number, cy: number, resolution: number): [number, number, number][] {\n\t\tconst ret: [number, number, number][] = [];\n\t\tconst z: number = this.#firstEdge.getBegin()[2];\n\n\t\tconst ps: number[] = this.#getInternalPoints(cx, cy, resolution);\n\t\tfor (const x of ps) {\n\t\t\tret.push([x, cy, z]);\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst y: number = cy + inc * resolution;\n\t\t\tconst ps: number[] = this.#getInternalPoints(cx, y, resolution);\n\t\t\tif (0 === ps.length) break;\n\t\t\tfor (const x of ps) {\n\t\t\t\tret.push([x, y, z]);\n\t\t\t}\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst y: number = cy - inc * resolution;\n\t\t\tconst ps: number[] = this.#getInternalPoints(cx, y, resolution);\n\t\t\tif (0 === ps.length) break;\n\t\t\tfor (const x of ps) {\n\t\t\t\tret.push([x, y, z]);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Computes the x-coordinates of grid points within the face boundaries at a specific y-coordinate.\n\t *\n\t * @param cx - The center x-coordinate.\n\t * @param cy - The y-coordinate at which to compute points.\n\t * @param resolution - The resolution of the grid.\n\t * @returns An array of x-coordinates of internal grid points at the specified y-coordinate.\n\t */\n\t#getInternalPoints(cx: number, cy: number, resolution: number): number[] {\n\t\tconst ips: number[] = this.#getIntersectionPoints(cy);\n\n\t\tlet [x0, x1] = ips;\n\t\tif (x0 > x1) {\n\t\t\t[x0, x1] = [x1, x0];\n\t\t}\n\t\tconst pts: number[] = [];\n\t\tif (x0 < cx && cx < x1) {\n\t\t\tpts.push(cx);\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst s: number = pts.length;\n\t\t\tconst x: number = cx + inc * resolution;\n\t\t\tif (x0 < x && x < x1) {\n\t\t\t\tpts.push(x);\n\t\t\t}\n\t\t\tif (pts.length === s) break;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst s: number = pts.length;\n\t\t\tconst x: number = cx - inc * resolution;\n\t\t\tif (x0 < x && x < x1) {\n\t\t\t\tpts.push(x);\n\t\t\t}\n\t\t\tif (pts.length === s) break;\n\t\t}\n\t\treturn pts;\n\t}\n\n\t/**\n\t * Calculates the x-coordinates where the face's edges intersect a horizontal line at a specified y-coordinate.\n\t *\n\t * @param y - The y-coordinate at which to find intersections.\n\t * @returns An array of x-coordinates where the edges intersect the horizontal line.\n\t */\n\t#getIntersectionPoints(y: number): number[] {\n\t\tconst pts: number[] = [];\n\n\t\tfor (let e: Edge = this.#firstEdge; ; e = e.next as Edge) {\n\t\t\tconst xs: number[] = Face.#getIntersection(e, y);\n\t\t\tpts.push(...xs);\n\t\t\tif (e.next === this.#firstEdge) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn Face.#removeDuplicates(pts);\n\t}\n\n\t/**\n\t * Calculates the x-coordinate(s) where a given edge intersects a horizontal line at a specified y-coordinate.\n\t *\n\t * @param e - The edge to check for intersection.\n\t * @param y - The y-coordinate of the horizontal line.\n\t * @returns An array of x-coordinates where the edge intersects the line; empty if no intersection.\n\t */\n\tstatic #getIntersection(e: Edge, y: number): number[] {\n\t\tconst [x0, y0] = e.getBegin();\n\t\tconst [x1, y1] = e.getEnd();\n\n\t\tif (y < Math.min(y0, y1) || Math.max(y0, y1) < y) {\n\t\t\treturn [];\n\t\t}\n\t\tif (Math.abs(y0 - y1) < Face.E) {\n\t\t\treturn [x0, x1];\n\t\t}\n\t\tconst A: number = y1 - y0;\n\t\tconst B: number = -(x1 - x0);\n\t\tconst C: number = - A * x0 - B * y0;\n\n\t\tif (Math.abs(A) < Face.E) {\n\t\t\treturn [];\n\t\t}\n\t\treturn [-(B * y + C) / A];\n\t}\n\n\t/**\n\t * Removes near-duplicate numbers from an array, considering values within a small epsilon (Face.E) as duplicates.\n\t *\n\t * @param vs - An array of numbers.\n\t * @returns A new sorted array with near-duplicates removed.\n\t */\n\tstatic #removeDuplicates(vs: number[]): number[] {\n\t\tif (vs.length === 0) return [];\n\n\t\tvs.sort((a: number, b: number): number => a - b);\n\t\tconst res: number[] = [];\n\t\tlet cur: number = vs[0];\n\n\t\tfor (let i: number = 1; i < vs.length; i++) {\n\t\t\tif (Face.E < vs[i] - vs[i - 1]) {\n\t\t\t\tres.push(cur);\n\t\t\t\tcur = vs[i];\n\t\t\t}\n\t\t}\n\t\tres.push(cur);\n\t\treturn res;\n\t}\n\n}\n", "/**\n * Mesh\n *\n * @author Takuto Yanagida\n * @version 2024-11-19\n */\n\nimport { Vertex, add } from './vertex';\nimport { Edge } from './edge';\nimport { Face } from './face';\nimport { Plane } from './plane';\n\n/**\n * Represents a mesh structure composed of vertices, edges, and faces in 3D space.\n * The Mesh class provides methods to build the mesh, split it along a plane, and\n * compute cross-sections.\n */\nexport class Mesh {\n\n\t#vs: Vertex[] = [];\n\t#es: Edge[]   = [];\n\t#fs: Face[]   = [];\n\n\t/**\n\t * Builds the mesh using a set of vertices and face indices.\n\t * Each face is formed by a series of edges created from the vertices.\n\t *\n\t * @param vs - The vertices of the mesh.\n\t * @param faceIndex - Array of vertex indices, where each sub-array defines the vertices of a face.\n\t */\n\tstatic buildMesh(vs: Vertex[], faceIndex: number[][]): Mesh {\n\t\tconst m = new Mesh();\n\t\tfor (const v of vs) {\n\t\t\tm.#vs.push([...v]);\n\t\t}\n\t\tfor (const vis of faceIndex) {\n\t\t\tconst faceEs: Edge[] = [];\n\n\t\t\tfor (const vi of vis) {\n\t\t\t\tfaceEs.push(new Edge(m.#vs[vi]));\n\t\t\t}\n\t\t\tm.#es.push(...faceEs);\n\t\t\tm.#fs.push(new Face(faceEs));\n\t\t}\n\t\tMesh.#pairEdges(m.#es);\n\t\treturn m;\n\t}\n\n\t/**\n\t * Pairs edges that are at the same position but in opposite directions.\n\t * This method ensures that half-edges have corresponding paired edges.\n\t *\n\t * @param es - Array of edges in the mesh.\n\t */\n\tstatic #pairEdges(es: Edge[]): void {\n\t\tfor (const e0 of es) {\n\t\t\tif (e0.pair !== null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const e1 of es) {\n\t\t\t\tif (e0 === e1 || e1.pair !== null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Matching edge in opposite direction\n\t\t\t\tif (e0.getBegin() === e1.getEnd() && e1.getBegin() === e0.getEnd()) {\n\t\t\t\t\te0.pair = e1;\n\t\t\t\t\te1.pair = e0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconstructor() {\n\t}\n\n\t/**\n\t * Splits the mesh along a specified plane and generates new faces and vertices on one side of the plane.\n\t *\n\t * @param p - The plane to split the mesh along.\n\t * @param site - The reference vertex to determine which side of the plane to retain.\n\t */\n\tsplitMesh(p: Plane, site: Vertex): void {\n\t\tconst siteSide: number = p.side(site);\n\t\tif (siteSide === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst edgeToInter: Map<Edge, Vertex> = p.intersections(this.#es);\n\t\tif (edgeToInter.size === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst sides: Map<Vertex, number> = p.sides(this.#vs);  // Check if each vertex is on front or back side of the plane\n\t\tconst newVs: Vertex[] = [];\n\t\tconst newEs: Edge[]   = [];\n\t\tconst newFs: Face[]   = [];\n\n\t\tfor (const f of this.#fs) {\n\t\t\tconst newFaceVs: Vertex[] = f.verticesOf(siteSide, sides, edgeToInter);\n\n\t\t\tif (newFaceVs.length <= 2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// If there are three or more vertices on the reference side, create a new face\n\t\t\tconst faceEs: Edge[] = [];\n\n\t\t\tfor (const v of newFaceVs) {\n\t\t\t\tif (!newVs.includes(v)) {\n\t\t\t\t\tnewVs.push(v);\n\t\t\t\t}\n\t\t\t\tfaceEs.push(new Edge(v));\n\t\t\t}\n\t\t\tnewEs.push(...faceEs);\n\t\t\tnewFs.push(new Face(faceEs));\n\t\t}\n\t\tMesh.#pairEdges(newEs);\n\n\t\tconst unpairedEs: Edge[] = newEs.filter((e: Edge): boolean => e.pair === null);\n\n\t\t// Handle unpaired edges to form a closed loop, creating a new face\n\t\tif (unpairedEs.length > 0) {\n\t\t\tconst faceEs: Edge[] = Mesh.#createFaceEdgesFromUnpairedEdges(unpairedEs);\n\t\t\tnewEs.push(...faceEs);\n\t\t\tnewFs.push(new Face(faceEs));\n\t\t}\n\t\tthis.#vs = newVs;\n\t\tthis.#fs = newFs;\n\t\tthis.#es = newEs;\n\t}\n\n\t/**\n\t * Computes the cross-section of the mesh along a specified plane.\n\t * Returns a face that represents the cross-section if it exists.\n\t *\n\t * @param org - The origin vertex for the plane.\n\t * @param norm - The normal vector for the plane.\n\t * @returns A Face representing the cross-section or null if no intersection exists.\n\t */\n\tcrossSection(org: Vertex, norm: Vertex): Face | null {\n\t\tconst p       : Plane = new Plane(org, norm);\n\t\tconst siteSide: number = p.side(add(org, norm));\n\t\tif (siteSide === 0) {\n\t\t\treturn null;\n\t\t}\n\t\t// Determine front or back side for each vertex\n\t\tconst edgeToInter: Map<Edge, Vertex> = p.intersections(this.#es);\n\t\tif (edgeToInter.size === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst sides: Map<Vertex, number> = p.sides(this.#vs);\n\t\tconst newEs: Edge[]   = [];\n\t\tconst newFs: Face[]   = [];\n\n\t\tfor (const f of this.#fs) {\n\t\t\tconst newFaceVs: Vertex[] = f.verticesOf(siteSide, sides, edgeToInter);\n\n\t\t\tif (newFaceVs.length <= 2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Create a new face if there are three or more vertices on the reference side\n\t\t\tconst faceEs: Edge[] = [];\n\n\t\t\tfor (const v of newFaceVs) {\n\t\t\t\tfaceEs.push(new Edge(v));\n\t\t\t}\n\t\t\tnewEs.push(...faceEs);\n\t\t\tnewFs.push(new Face(faceEs));\n\t\t}\n\t\tMesh.#pairEdges(newEs);\n\n\t\tconst unpairedEs: Edge[] = newEs.filter((e: Edge): boolean => e.pair === null);\n\n\t\t// Form a closed loop with unpaired edges to create a new face if possible\n\t\tif (unpairedEs.length > 0) {\n\t\t\tconst faceEs: Edge[] = Mesh.#createFaceEdgesFromUnpairedEdges(unpairedEs);\n\t\t\tif (faceEs.length > 2) {\n\t\t\t\treturn new Face(faceEs);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic #createFaceEdgesFromUnpairedEdges(unpairedEs: Edge[]): Edge[] {\n\t\tconst faceEs: Edge[] = [];\n\t\tlet e: Edge = unpairedEs[0];\n\t\tdo {\n\t\t\tif (e.next === null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet next: Edge = e.next;\n\t\t\twhile (next && !unpairedEs.includes(next)) {\n\t\t\t\tnext = (next.pair as Edge).next as Edge;\n\t\t\t}\n\t\t\tconst ne: Edge = new Edge(next.getBegin());\n\t\t\tfaceEs.push(ne);\n\t\t\tne.pair = e;\n\t\t\te.pair  = ne;\n\t\t\te       = next;\n\t\t} while (e !== unpairedEs[0]);\n\n\t\tfaceEs.reverse();\n\t\treturn faceEs;\n\t}\n\n}\n", "/**\n * Voronoi Partition\n * @author Takuto Yanagida\n * @version 2024-11-19\n */\n\nimport { Vertex, intDiv, sub } from './vertex';\nimport { Plane } from './plane';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\n\n/**\n * Represents a Voronoi partition in 3D space. This class provides methods to create and\n * manage Voronoi cells using a set of sites, adjacency tables, and weight tables.\n * Each cell is represented as a mesh structure.\n */\nexport class Voronoi {\n\n\tstatic readonly FACE_INDEXES: number[][] = [\n\t\t[0, 1, 2, 3], [1, 0, 4, 5], [0, 3, 7, 4],\n\t\t[2, 1, 5, 6], [5, 4, 7, 6], [3, 2, 6, 7]\n\t];\n\n\t#defaultVs: Vertex[];\n\n\t#sites: Vertex[] = [];\n\t#cells: Mesh[] = [];;\n\n\t/**\n\t * Initializes the Voronoi partition with default vertices defining a bounding box.\n\t *\n\t * @param x0 - Minimum x-coordinate for the bounding box.\n\t * @param x1 - Maximum x-coordinate for the bounding box.\n\t * @param y0 - Minimum y-coordinate for the bounding box.\n\t * @param y1 - Maximum y-coordinate for the bounding box.\n\t * @param z0 - Minimum z-coordinate for the bounding box.\n\t * @param z1 - Maximum z-coordinate for the bounding box.\n\t */\n\tconstructor(x0: number, x1: number, y0: number, y1: number, z0: number, z1: number) {\n\t\tthis.#defaultVs = [\n\t\t\t[x1, y1, z1], [x0, y1, z1],\n\t\t\t[x0, y1, z0], [x1, y1, z0],\n\t\t\t[x1, y0, z1], [x0, y0, z1],\n\t\t\t[x0, y0, z0], [x1, y0, z0],\n\t\t];\n\t}\n\n\t/**\n\t * Adds a site for the Voronoi partition.\n\t *\n\t * @param site - Coordinates of the site as a tuple [x, y, z].\n\t */\n\taddSite(site: [number, number, number]): void {\n\t\tthis.#sites.push([...site]);\n\t}\n\n\t/**\n\t * Initializes and creates Voronoi cells based on optionally provided adjacency and weight tables.\n\t *\n\t * @param adjacencyTable - Optional adjacency table for defining relationships between sites.\n\t * @param weightTable - Optional weight table that affects partitioning.\n\t */\n\tcreateCells(adjacencyTable: number[][] | null = null, weightTable: number[][] | null = null): void {\n\t\tthis.#cells.length = 0;\n\n\t\tif (!adjacencyTable && !weightTable) {\n\t\t\tthis.#divide1();\n\t\t} else if (adjacencyTable && !weightTable) {\n\t\t\tthis.#divide2(adjacencyTable);\n\t\t} else if (adjacencyTable && weightTable) {\n\t\t\tthis.#divide3(adjacencyTable, weightTable);\n\t\t}\n\t}\n\n\t/**\n\t * Creates the Voronoi cells by splitting initial cells.\n\t */\n\t#divide1(): void {\n\t\tfor (const s of this.#sites) {\n\t\t\t// Creates initial cells as regular hexahedrons.\n\t\t\tconst m: Mesh = Mesh.buildMesh(this.#defaultVs, Voronoi.FACE_INDEXES);\n\n\t\t\tfor (const t of this.#sites) {\n\t\t\t\tif (s === t) continue;\n\t\t\t\tconst p: Plane = new Plane(intDiv(s, t), sub(s, t));\n\t\t\t\tm.splitMesh(p, s);\n\t\t\t}\n\t\t\tthis.#cells.push(m);\n\t\t}\n\t}\n\t/**\n\t * Creates the Voronoi cells by splitting initial cells based on adjacency\n\t * tables.\n\t *\n\t * @param adjTab - Optional adjacency table for the sites.\n\t */\n\t#divide2(adjTab: number[][]): void {\n\t\tfor (const [i, s] of this.#sites.entries()) {\n\t\t\t// Creates initial cells as regular hexahedrons.\n\t\t\tconst m: Mesh = Mesh.buildMesh(this.#defaultVs, Voronoi.FACE_INDEXES);\n\n\t\t\tfor (let a of adjTab[i]) {\n\t\t\t\tconst t: Vertex = this.#sites[a];\n\t\t\t\tconst p: Plane = new Plane(intDiv(s, t), sub(s, t));\n\t\t\t\tm.splitMesh(p, s);\n\t\t\t}\n\t\t\tthis.#cells.push(m);\n\t\t}\n\t}\n\n\t/**\n\t * Creates the Voronoi cells by splitting initial cells based on adjacency\n\t * and weight tables.\n\t *\n\t * @param adjTab - Optional adjacency table for the sites.\n\t * @param weiTab - Optional weight table that influences partitioning.\n\t */\n\t#divide3(adjTab: number[][], weiTab: number[][]): void {\n\t\tfor (const [i, s] of this.#sites.entries()) {\n\t\t\t// Creates initial cells as regular hexahedrons.\n\t\t\tconst m: Mesh = Mesh.buildMesh(this.#defaultVs, Voronoi.FACE_INDEXES);\n\n\t\t\tconst as: number[] = adjTab[i];\n\t\t\tconst ws: number[] = weiTab[i];\n\n\t\t\tfor (let j: number = 0; j < as.length; ++j) {\n\t\t\t\tconst t: Vertex = this.#sites[as[j]];\n\t\t\t\tconst p: Plane = new Plane(intDiv(s, t, ws[j]), sub(s, t));\n\t\t\t\tm.splitMesh(p, s);\n\t\t\t}\n\t\t\tthis.#cells.push(m);\n\t\t}\n\t}\n\n\t/**\n\t * Counts a grid of points within a specified cell at a given resolution.\n\t *\n\t * @param index - The index of the cell for which to calculate grid points.\n\t * @param resolution - The spacing between grid points.\n\t * @returns Count of the points.\n\t */\n\tcountGrids(index: number, resolution: number): number {\n\t\tlet ret : number = 0;\n\n\t\tconst norm: Vertex = [0, 0, 1];\n\t\tconst s   : Vertex = this.#sites[index];\n\t\tconst c   : Mesh   = this.#cells[index];\n\n\t\tconst f: Face | null = c.crossSection([0, 0, s[2]], norm);\n\t\tif (f) {\n\t\t\tconst pc: number = f.countGridPoints(s[0], s[1], resolution);\n\t\t\tret += pc;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst f: Face | null = c.crossSection([0, 0, s[2] + inc * resolution], norm);\n\t\t\tif (!f) break;\n\t\t\tconst pc: number = f.countGridPoints(s[0], s[1], resolution);\n\t\t\tif (!pc) break;\n\t\t\tret += pc;\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst f: Face | null = c.crossSection([0, 0, s[2] - inc * resolution], norm);\n\t\t\tif (!f) break;\n\t\t\tconst pc: number = f.countGridPoints(s[0], s[1], resolution);\n\t\t\tif (!pc) break;\n\t\t\tret += pc;\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Calculates a grid of points within a specified cell at a given resolution.\n\t *\n\t * @param index - The index of the cell for which to calculate grid points.\n\t * @param resolution - The spacing between grid points.\n\t * @returns A list of 3D coordinates representing grid points within the cell.\n\t */\n\tgetGrids(index: number, resolution: number): Vertex[] {\n\t\tconst ret : Vertex[] = [];\n\n\t\tconst norm: Vertex = [0, 0, 1];\n\t\tconst s   : Vertex = this.#sites[index];\n\t\tconst c   : Mesh   = this.#cells[index];\n\n\t\tconst f: Face | null = c.crossSection([0, 0, s[2]], norm);\n\t\tif (f) {\n\t\t\tret.push(...f.getGridPoints(s[0], s[1], resolution));\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst f: Face | null = c.crossSection([0, 0, s[2] + inc * resolution], norm);\n\t\t\tif (!f) break;\n\t\t\tconst ps: Vertex[] = f.getGridPoints(s[0], s[1], resolution);\n\t\t\tif (!ps.length) break;\n\t\t\tret.push(...ps);\n\t\t}\n\t\tfor (let inc: number = 1; ; ++inc) {\n\t\t\tconst f: Face | null = c.crossSection([0, 0, s[2] - inc * resolution], norm);\n\t\t\tif (!f) break;\n\t\t\tconst ps: Vertex[] = f.getGridPoints(s[0], s[1], resolution);\n\t\t\tif (!ps.length) break;\n\t\t\tret.push(...ps);\n\t\t}\n\t\treturn ret;\n\t}\n\n}\n"],
  "mappings": "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",
  "names": ["add", "a", "b", "sub", "intDiv", "m", "n", "Plane", "_Plane", "#A", "#B", "#C", "#D", "p0", "p1", "len", "p", "t", "vs", "sides", "v", "#intersection", "v0", "v1", "d", "u", "es", "ret", "e", "Edge", "#bgn", "#end", "v", "Face", "_Face", "#firstEdge", "es", "i", "ret", "e", "refSide", "vertToSide", "edgeToInter", "v", "cx", "cy", "resolution", "pc", "#countInternalPoints", "inc", "ips", "#getIntersectionPoints", "x0", "x1", "s", "x", "z", "ps", "#getInternalPoints", "y", "pts", "xs", "#getIntersection", "#removeDuplicates", "y0", "y1", "A", "B", "C", "vs", "a", "b", "res", "cur", "Mesh", "_Mesh", "#vs", "#es", "#fs", "vs", "faceIndex", "m", "v", "vis", "faceEs", "vi", "Edge", "Face", "#pairEdges", "es", "e0", "e1", "p", "site", "siteSide", "edgeToInter", "sides", "newVs", "newEs", "newFs", "f", "newFaceVs", "unpairedEs", "e", "#createFaceEdgesFromUnpairedEdges", "org", "norm", "Plane", "add", "next", "ne", "Voronoi", "_Voronoi", "#defaultVs", "#sites", "#cells", "x0", "x1", "y0", "y1", "z0", "z1", "site", "adjacencyTable", "weightTable", "#divide1", "#divide2", "#divide3", "s", "m", "Mesh", "p", "Plane", "intDiv", "sub", "adjTab", "i", "a", "t", "weiTab", "as", "ws", "j", "index", "resolution", "ret", "norm", "c", "f", "pc", "inc", "ps"]
}
